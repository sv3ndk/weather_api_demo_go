AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: weather_api_demo 

Parameters:
  RestStageName:
    Type: String
    Default: v1
    Description: REST API stage name

  WsStageName:
    Type: String
    Default: v3
    Description: Websocket stage name

Resources:
  # -----------------------
  # Request / Response API

  WeatherReadFrontendApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: REST API providing read access to weather events
      StageName: !Sub '${RestStageName}'
      ApiKeySourceType: HEADER
      Auth:
        ApiKeyRequired: true    # requiring an API key for all methods


  WeatherReadFrontendBasicUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - WeatherReadFrontendApiStage   # this is a hack. What I really want to wait for is WeatherReadFrontendApi.Deployment
    Properties:
      Description: Basic usage plan for the REST API
      ApiStages:
        - ApiId: !Ref WeatherReadFrontendApi
          Stage: !Sub '${RestStageName}'
          Throttle:
            "/weather/GET": 
              RateLimit: 50.0   
              BurstLimit: 100
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        RateLimit: 100.0
        BurstLimit: 200
      UsagePlanName: "Basic"      

  # 2 API Keys to be used by customer1 for the REST API
  WeatherReadFrontendApiKeyCustomer1:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Description: API Key
      Name: 'Customer1'
      Enabled: True

  Customer1HasBasicPlan:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref WeatherReadFrontendApiKeyCustomer1
      KeyType: API_KEY
      UsagePlanId: !Ref WeatherReadFrontendBasicUsagePlan

  WeatherReadFrontendApiKeyCustomer2:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Description: API Key
      Name: 'Customer2'
      Enabled: True

  Customer2HasBasicPlan:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref WeatherReadFrontendApiKeyCustomer2
      KeyType: API_KEY
      UsagePlanId: !Ref WeatherReadFrontendBasicUsagePlan



  WeatherReadFrontendFunction:
    Type: AWS::Serverless::Function 
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: weather_rest_frontend/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api 
          Properties:
            RestApiId: !Ref WeatherReadFrontendApi
            Path: /weather
            Method: GET
      Environment: 
        Variables:
          DYNAMO_TABLE: !Ref WeatherDynamoTable
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref WeatherDynamoTable

  # -----------------
  # Real time API

  WeatherWsAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WeatherWsAPI
      # ApiKeySelectionExpression: "$request.header.x-api-key"
      Description: WSS API for real time weather events
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WeatherWsOnConnectionEventFunction:
    Type: AWS::Serverless::Function 
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: weather_ws_on_connection_event/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Environment: 
        Variables:
          DYNAMO_TABLE: !Ref WeatherDynamoTable
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref WeatherDynamoTable
  WeatherWsOnConnectionEventFunctionMayBeInvokedByAPiGW:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref WeatherWsOnConnectionEventFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WeatherWsAPI}/*'
  WeatherWSOnConnectionEventIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WeatherWsAPI
      Description: websocket on connect
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeatherWsOnConnectionEventFunction.Arn}/invocations"
  WeatherWSOnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WeatherWsAPI
      # ApiKeyRequired: Boolean
      RouteKey: '$connect'
      AuthorizationType: NONE
      Target: !Sub "integrations/${WeatherWSOnConnectionEventIntegration}"
  WeatherWSOnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WeatherWsAPI
      # ApiKeyRequired: Boolean
      RouteKey: '$disconnect'
      AuthorizationType: NONE
      Target: !Sub "integrations/${WeatherWSOnConnectionEventIntegration}"

  # force a re-creation of the deployment by using a unique name each time => need to be updated at each re-deploy :(
  WeatherWsDeployment20230247:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WeatherWSOnConnectRoute
      - WeatherWSOnDisconnectRoute
    Properties:
      ApiId: !Ref WeatherWsAPI
  
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref WsStageName
      DeploymentId: !Ref WeatherWsDeployment20230247
      ApiId: !Ref WeatherWsAPI      

  WeatherEventWSPushFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Push new events to currently connected websocket client
      CodeUri: weather_event_ws_push/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Environment: 
        Variables:
          DYNAMO_TABLE: !Ref WeatherDynamoTable
          API_ID: !Ref WeatherWsAPI
          API_STAGE: !Ref WsStageName
          
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref WeatherDynamoTable
        - !Ref WeatherEventWSPushFunctionMayPostEventsToClients

      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt WeatherDynamoTable.StreamArn
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters:
                - Pattern: '{ "dynamodb" : { "Keys" : { "PK" : { "S" : [{"prefix": "DeviceId#"}] } } } }'


  WeatherEventWSPushFunctionMayPostEventsToClients:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - execute-api:Invoke
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WeatherWsAPI}/${WsStageName}/POST/@connections/*"

  # -----------------
  # Data 


  WeatherDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  WeatherDataGeneratorFunction:
    Type: AWS::Serverless::Function 
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: weather_data_generator/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        Clock:
          Type:  ScheduleV2
          Properties:
            ScheduleExpression: rate(1 minute)
      Environment: 
        Variables:
          DYNAMO_TABLE: !Ref WeatherDynamoTable
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref WeatherDynamoTable



Outputs:
  WeatherDynamoTableName:
    Description: DynamoDB table name
    Value: !Ref WeatherDynamoTable

  WeatherDynamoTableNameArn :
    Description: DynamoDB table ARN
    Value: !GetAtt WeatherDynamoTable.Arn

  WeatherAPIRestEndpoint:
    Description: "REST API endpoint "
    Value: !Sub "https://${WeatherReadFrontendApi}.execute-api.${AWS::Region}.amazonaws.com/${RestStageName}/weather/"

  Customer1ApiKeyId:
    Description: "ID of the API key 1 to be used by the client to the REST API"
    Value: !Ref WeatherReadFrontendApiKeyCustomer1

  Customer2ApiKeyId:
    Description: "ID of the API key 2 to be used by the client to the REST API"
    Value: !Ref WeatherReadFrontendApiKeyCustomer2

  WeatherAPIWsEndpoint:
    Description: "Websocket API endpoint"
    Value: !Sub "${WeatherWsAPI.ApiEndpoint}/${WsStageName}"
